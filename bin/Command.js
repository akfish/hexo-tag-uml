// Generated by CoffeeScript 1.6.3
var Command, Log, assetDir, async, check, checkAndLink, checkAndUnlink, colors, doneOrFail, file, fs, jumlyDir, jumlyLayoutAsset, jumlyLayoutFile, jumlyLayoutName, layoutDir, log, pad, path, resFiles, sourceDir, themeDir, uncheck, yesOrNo;

colors = require('colors');

Log = require('./Log');

async = require('async');

fs = require('fs');

path = require('path');

log = new Log();

file = hexo.file;

themeDir = hexo.theme_dir;

layoutDir = path.resolve(themeDir, "layout");

assetDir = path.resolve(__dirname, "../asset");

jumlyLayoutName = "jumly.ejs";

jumlyLayoutAsset = path.resolve(assetDir, jumlyLayoutName);

jumlyLayoutFile = path.resolve(layoutDir, "_partial", jumlyLayoutName);

resFiles = [path.join("jumly", "coffee-script.js"), path.join("jumly", "jumly.css"), path.join("jumly", "jumly.min.js")];

console.log(__dirname);

sourceDir = path.resolve(themeDir, "source");

jumlyDir = path.resolve(sourceDir, "jumly");

pad = function(val, length, padChar) {
  var numPads;
  if (padChar == null) {
    padChar = '.';
  }
  val += '';
  numPads = length - val.length;
  if (numPads > 0) {
    return val + new Array(numPads + 1).join(padChar);
  } else {
    return val;
  }
};

yesOrNo = function(b) {
  var answer;
  answer = b ? "YES".green : "NO".red;
  return "" + "[".bold + answer + "]".bold;
};

doneOrFail = function(b) {
  var answer;
  answer = b ? "DONE".green : "FAIL".red;
  return "" + "[".bold + answer + "]".bold;
};

checkAndLink = function(f, src) {
  var deployed, error;
  deployed = fs.existsSync(f);
  log.info(pad("" + f + " deployed ", 50) + (" " + (yesOrNo(deployed))));
  if (!deployed) {
    try {
      fs.linkSync(src, f);
      return log.info(pad("Deploy " + f + " ", 50) + (" " + (doneOrFail(true))));
    } catch (_error) {
      error = _error;
      log.error(pad("Deploy " + f + " ", 50) + (" " + (doneOrFail(false))));
      return log.error(error);
    }
  }
};

checkAndUnlink = function(f) {
  var deployed, error;
  deployed = fs.existsSync(f);
  log.info(pad("" + f + " deployed ", 50) + (" " + (yesOrNo(deployed))));
  if (deployed) {
    try {
      fs.unlinkSync(f);
      return log.info(pad("Undeploy " + f + " ", 50) + (" " + (doneOrFail(true))));
    } catch (_error) {
      error = _error;
      log.error(pad("Undeploy " + f + " ", 50) + (" " + (doneOrFail(false))));
      return log.error(error);
    }
  }
};

check = function(next) {
  var dst, f, src, _i, _len, _results;
  checkAndLink(jumlyLayoutFile, jumlyLayoutAsset);
  if (!fs.existsSync(jumlyDir)) {
    fs.mkdirSync(jumlyDir);
  }
  _results = [];
  for (_i = 0, _len = resFiles.length; _i < _len; _i++) {
    f = resFiles[_i];
    src = path.resolve(assetDir, f);
    dst = path.resolve(sourceDir, f);
    _results.push(checkAndLink(dst, src));
  }
  return _results;
};

uncheck = function(next) {
  var dst, f, _i, _len;
  checkAndUnlink(jumlyLayoutFile);
  for (_i = 0, _len = resFiles.length; _i < _len; _i++) {
    f = resFiles[_i];
    dst = path.resolve(sourceDir, f);
    checkAndUnlink(dst);
  }
  if (fs.existsSync(jumlyDir)) {
    return fs.rmdirSync(jumlyDir);
  }
};

module.exports = Command = (function() {
  function Command(callback) {
    this.callback = callback;
  }

  Command.prototype.execute = function(opt) {
    var handler;
    handler = this[opt];
    if (handler != null) {
      return handler();
    } else {
      log.error("Unknown command: " + opt);
      return hexo.call('help', {
        _: ['math']
      }, this.callback);
    }
  };

  Command.prototype.install = function() {
    return async.waterfall([check], function(err, result) {
      if (err != null) {
        return log.error(err);
      } else {
        return log.info("Done!");
      }
    });
  };

  Command.prototype.uninstall = function() {
    return async.waterfall([uncheck], function(err, result) {
      if (err != null) {
        return log.error(err);
      } else {
        return log.info("Done!");
      }
    });
  };

  return Command;

})();
